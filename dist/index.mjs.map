{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import {\n  SupertabConnectConfig,\n  EventPayload,\n  TokenVerificationResult,\n  TokenInvalidReason,\n} from \"./types\";\nimport {\n  jwtVerify,\n  decodeProtectedHeader,\n  decodeJwt,\n  JWTHeaderParameters,\n  JWTPayload,\n} from \"jose\";\n\n// In-memory cache for JWK sets\nconst jwksCache = new Map<string, any>();\nconst debug = false;\n\nexport class SupertabConnect {\n  private apiKey: string;\n  private baseUrl: string;\n  private merchantSystemId: string;\n\n  constructor(config: SupertabConnectConfig) {\n    if (!config.apiKey || !config.merchantSystemId) {\n        throw new Error(\n            \"Missing required configuration: apiKey and merchantSystemId are required\"\n        );\n    }\n    this.apiKey = config.apiKey;\n    this.merchantSystemId = config.merchantSystemId;\n    this.baseUrl = \"https://api-connect.sbx.supertab.co\";\n  }\n\n  /**\n   * Get the JWKS for a given issuer, using cache if available\n   * @private\n   */\n  private async getJwksForIssuer(issuer: string): Promise<any> {\n    if (!jwksCache.has(issuer)) {\n      const jwksUrl = `${\n        this.baseUrl\n      }/.well-known/jwks.json/${encodeURIComponent(issuer)}`;\n\n      try {\n        const jwksResponse = await fetch(jwksUrl);\n        if (!jwksResponse.ok) {\n          throw new Error(`Failed to fetch JWKS: ${jwksResponse.status}`);\n        }\n\n        const jwksData = await jwksResponse.json();\n        jwksCache.set(issuer, jwksData);\n      } catch (error) {\n        if (debug) {\n          console.error(\"Error fetching JWKS:\", error);\n        }\n        throw error;\n      }\n    }\n\n    return jwksCache.get(issuer);\n  }\n\n  /**\n   * Verify a JWT token\n   * @param token The JWT token to verify\n   * @returns A promise that resolves with the verification result\n   */\n  async verifyToken(token: string): Promise<TokenVerificationResult> {\n    // 1. Check if token exists\n    if (!token) {\n      return {\n        valid: false,\n        reason: TokenInvalidReason.MISSING_TOKEN,\n      };\n    }\n\n    // 2. Verify header and algorithm\n    let header: JWTHeaderParameters;\n    try {\n      header = decodeProtectedHeader(token) as JWTHeaderParameters;\n    } catch (error) {\n      if (debug) {\n        console.error(\"Invalid JWT header:\", error);\n      }\n      return {\n        valid: false,\n        reason: TokenInvalidReason.INVALID_HEADER,\n      };\n    }\n\n    if (header.alg !== \"RS256\") {\n      return {\n        valid: false,\n        reason: TokenInvalidReason.INVALID_ALG,\n      };\n    }\n\n    // 3. Verify payload and issuer\n    let payload: JWTPayload;\n    try {\n      payload = decodeJwt(token);\n    } catch (error) {\n      if (debug) {\n        console.error(\"Invalid JWT payload:\", error);\n      }\n      return {\n        valid: false,\n        reason: TokenInvalidReason.INVALID_PAYLOAD,\n      };\n    }\n\n    const issuer: string | undefined = payload.iss;\n    if (!issuer || !issuer.startsWith(\"urn:stc:customer:\")) {\n      return {\n        valid: false,\n        reason: TokenInvalidReason.INVALID_ISSUER,\n      };\n    }\n\n    // 4. Verify signature\n    try {\n      const jwks = await this.getJwksForIssuer(issuer);\n\n      // Create a key finder function for verification\n      const getKey = async (header: JWTHeaderParameters) => {\n        const jwk = jwks.keys.find((key: any) => key.kid === header.kid);\n        if (!jwk) throw new Error(`No matching key found: ${header.kid}`);\n        return jwk;\n      };\n\n      const result = await jwtVerify(token, getKey, {\n        issuer,\n        algorithms: [\"RS256\"],\n        clockTolerance: \"1m\",\n      });\n\n      // Success case - token is valid\n      return {\n        valid: true,\n        payload: result.payload,\n      };\n    } catch (error: any) {\n      if (debug) {\n        console.error(\"JWT verification failed:\", error);\n      }\n\n      // Check if token is expired\n      if (error.message?.includes(\"exp\")) {\n        return {\n          valid: false,\n          reason: TokenInvalidReason.EXPIRED,\n        };\n      }\n\n      return {\n        valid: false,\n        reason: TokenInvalidReason.SIGNATURE_VERIFICATION_FAILED,\n      };\n    }\n  }\n\n  /**\n   * Records an analytics event\n   * @param eventName Name of the event to record\n   * @param customerToken Optional customer token for the event\n   * @param properties Additional properties to include with the event\n   * @returns Promise that resolves when the event is recorded\n   */\n  async recordEvent(\n    eventName: string,\n    customerToken?: string,\n    properties: Record<string, any> = {}\n  ): Promise<void> {\n    const payload: EventPayload = {\n      event_name: eventName,\n      customer_system_token: customerToken,\n      merchant_system_identifier: this.merchantSystemId,\n      properties,\n    };\n\n    try {\n      const response = await fetch(`${this.baseUrl}/events`, {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer ${this.apiKey}`,\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(payload),\n      });\n\n      if (!response.ok) {\n        if (debug) {\n          console.error(`Failed to record event: ${response.status}`);\n        }\n      }\n    } catch (error) {\n      if (debug) {\n        console.error(\"Error recording event:\", error);\n      }\n    }\n  }\n\n  /**\n   * Handle the request, report an event to Supertab Connect and return a response\n   */\n  private async baseHandleRequest(\n      token: string,\n      url: string,\n      user_agent: string,\n      ctx: any\n  ): Promise<Response> {\n\n    // 1. Verify token\n    const verification = await this.verifyToken(token);\n\n    // Record event helper\n    async function recordEvent(stc: SupertabConnect, eventName: string, ctx: any) {\n      const eventProperties = {\n        page_url: url,\n        user_agent: user_agent,\n        verification_status: verification.valid ? \"valid\" : \"invalid\",\n        verification_reason: verification.reason || \"success\",\n      };\n      if (ctx) {\n        const eventPromise = stc.recordEvent(eventName, token, eventProperties);\n        ctx.waitUntil(eventPromise);\n        return eventPromise;\n      } else {\n        return await stc.recordEvent(eventName, token, eventProperties);\n      }\n    }\n\n    // 2. Handle based on verification result\n    if (!verification.valid) {\n      await recordEvent(this, verification.reason || \"token_verification_failed\", ctx);\n      const message =\n        \"❌ Content access denied\" +\n        (verification.reason ? `: ${verification.reason}` : \"\");\n      return new Response(message, { status: 403, headers: new Headers({ \"Content-Type\": \"application/json\" }) });\n    }\n\n    // 3. Success\n    await recordEvent(this, \"page_viewed\", ctx);\n    return new Response(\"✅ Content Access granted\", {\n      status: 200,\n      headers: new Headers({ \"Content-Type\": \"application/json\" }),\n    });\n  }\n\n  private extractDataFromRequest(request: Request): { token: string; url: string; user_agent: string } {\n    // Parse token\n    const auth = request.headers.get(\"Authorization\") || \"\";\n    const token = auth.startsWith(\"Bearer \") ? auth.slice(7) : \"\";\n\n    // Extract URL and user agent\n    const url = request.url;\n    const user_agent = request.headers.get(\"User-Agent\") || \"unknown\";\n\n    return { token, url, user_agent };\n  }\n\n  async cloudflareHandleRequest(request: Request, ctx: any = null): Promise<Response> {\n    // 1. Extract token, URL, and user agent from the request\n    const { token, url, user_agent } = this.extractDataFromRequest(request);\n\n    // 2. In the future: handle bot detection here\n\n    // 3. Call the base handle request method and return the result\n    return this.baseHandleRequest(token, url, user_agent, ctx);\n  }\n\n  async fastlyHandleRequest(request: Request, ctx: any = null): Promise<Response> {\n    // 1. Extract token, URL, and user agent from the request\n    const { token, url, user_agent } = this.extractDataFromRequest(request);\n\n    // 2. In the future: handle bot detection here\n\n    // 3. Call the base handle request method and return the result\n    return this.baseHandleRequest(token, url, user_agent, ctx);\n  }\n}\n"],"mappings":"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","names":["jwtVerify","decodeProtectedHeader","decodeJwt","jwksCache","debug","SupertabConnect","config","issuer","jwksUrl","jwksResponse","jwksData","error","token","header","payload","jwks","jwk","key","eventName","customerToken","properties","response","url","user_agent","ctx","verification","recordEvent","stc","eventProperties","eventPromise","message","request","auth"]}